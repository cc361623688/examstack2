<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.examstack.management.persistence.ExamMapper">
	<insert id="addExam" parameterType="com.examstack.common.domain.exam.Exam" useGeneratedKeys="true" keyProperty="examId" >
		insert into et_exam(exam_name,exam_subscribe,exam_type,start_time,end_time,exam_paper_id,creator,creator_id,approved)
		values(#{examName},#{examSubscribe},#{examType},#{effTime},#{expTime},#{examPaperId},#{creator},#{creatorId},#{approved})
	</insert>
	<select id="getExamById" resultType="com.examstack.common.domain.exam.Exam">
		select id examId,exam_name examName,exam_subscribe examSubscribe,exam_type examType,start_time effTime,end_time expTime,exam_paper_id examPaperId,creator,creator_id creatorId,approved
		from et_exam where id=#{examId}
	</select>
	<update id="changeExamStatus">
		update et_exam set approved=#{approved} where id=#{examId}
	</update>
	<insert id="addUserExamHist" parameterType="com.examstack.common.domain.exam.ExamHistory" useGeneratedKeys="true" keyProperty="histId">
		insert into et_user_exam_history(user_id,start_time,exam_id,exam_paper_id,enabled,point,seri_no,content,answer_sheet,duration,point_get,submit_time,approved,verify_time)
		values(#{userId},#{startTime},#{examId},#{examPaperId},#{enabled},#{point},#{seriNo},#{content},#{answerSheet},#{duration},#{pointGet},#{submitTime},#{approved},#{verifyTime})
	</insert>
	<update id="updateUserExamHist">
		update et_user_exam_history
		<set>
			answer_sheet = #{answerSheetStr},point=#{answerSheet.pointMax},point_get=#{answerSheet.pointRaw},submit_time=sysdate(),duration=#{answerSheet.duration},
			start_time=#{answerSheet.startTime}
			<if test="approved != 0">
				,approved=#{approved}
			</if>
		</set>
		where id=#{answerSheet.examHistroyId}
	</update>
	<select id="getUserExamHistListByExamId" resultType="com.examstack.common.domain.exam.ExamHistory">
		select m.*,p.dep_name depName from (select a.id histId,a.user_id userId,b.user_name userName,b.true_name trueName,b.phone_num phoneNum,b.email,b.national_id nationalId,a.start_time startTime,a.exam_id examId,a.exam_paper_id examPaperId,a.enabled,c.total_point point,a.seri_no seriNo,a.content,
		a.answer_sheet answerSheet,a.duration,a.point_get pointGet,a.submit_time submitTime,a.approved,a.verify_time verifyTime,c.pass_point passPoint from et_user_exam_history a,et_user b,et_exam_paper c
		where a.user_id=b.user_id and a.exam_id=#{examId} and a.exam_paper_id=c.id
		<if test="order != null">
			order by a.point_get ${order}
		</if>
		<if test="limit != 0">
			limit 0,#{limit}
		</if>
		) m left join et_user_2_department n on m.userId = n.user_id left join et_department p on n.dep_id=p.dep_id
		<if test="searchStr != null">
			where (instr(m.trueName,#{searchStr}) &lt;&gt; 0 or instr(m.userName,#{searchStr}) &lt;&gt; 0 or instr(m.phoneNum,#{searchStr}) &lt;&gt; 0 or instr(m.nationalId,#{searchStr}) &lt;&gt; 0 or instr(m.email,#{searchStr}) &lt;&gt;0 or instr(m.seriNo,#{searchStr}) &lt;&gt; 0 or instr(p.dep_name,#{searchStr}) &lt;&gt; 0)
		</if>
	</select>
	<select id="getUserExamHistList" resultType="com.examstack.common.domain.exam.ExamHistory">
		select m.*,p.dep_name depName from (select a.id histId,a.user_id userId,b.user_name userName,b.true_name trueName,a.start_time startTime,a.exam_id examId,a.exam_paper_id examPaperId,a.enabled,a.point,a.seri_no seriNo,a.content,
		a.answer_sheet answerSheet,a.duration,a.point_get pointGet,a.submit_time submitTime,a.approved,a.verify_time verifyTime from et_user_exam_history a,et_user b
		where a.user_id=b.user_id 
		<if test="array != null">
			and a.approved in
			<foreach collection="array" open="(" close=")" separator=","
				index="index" item="item">
				#{item}
			</foreach>
		</if>
		) m left join et_user_2_department n on m.userId = n.user_id left join et_department p on n.dep_id=p.dep_id
		order by m.histId desc
	</select>
	<select id="getUserExamHistListByHistId" resultType="com.examstack.common.domain.exam.ExamHistory">
		select a.id histId,a.user_id userId,b.user_name userName,b.true_name trueName,a.start_time startTime,a.exam_id examId,a.exam_paper_id examPaperId,a.enabled,a.point,a.seri_no seriNo,a.content,
		a.answer_sheet answerSheet,a.duration,a.point_get pointGet,a.submit_time submitTime,a.approved,a.verify_time verifyTime from et_user_exam_history a,et_user b
		where a.user_id=b.user_id and a.id=#{histId}
	</select>
	<select id="getUserExamHistByUserIdAndExamId" resultType="com.examstack.common.domain.exam.ExamHistory">
		select a.id histId,a.user_id userId,b.user_name userName,b.true_name
		trueName,a.start_time startTime,a.exam_id examId,a.exam_paper_id
		examPaperId,a.enabled,a.point,a.seri_no seriNo,a.content,
		a.answer_sheet answerSheet,a.duration,a.point_get
		pointGet,a.submit_time submitTime,a.approved,a.verify_time verifyTime
		from et_user_exam_history a,et_user b
		where a.user_id=b.user_id and
		a.user_id=#{userId} and a.exam_id=#{examId}
		<if test="array != null">
			and a.approved in
			<foreach collection="array" open="(" close=")" separator=","
				index="index" item="item">
				#{item}
			</foreach>
		</if>

	</select>
	<update id="changeUserExamHistStatus">
		update et_user_exam_history set approved=#{approved},verify_time=sysdate() where id=#{histId}
	</update>
	
	<update id="deleteUserExamHist">
		delete from et_user_exam_history where id=#{histId} and approved=0
	</update>
	<update id="deleteUserExamHistByUserId">
		delete from et_user_exam_history where exam_id=#{examId} and user_id=#{userId} and approved=0
	</update>
	
	<select id="getExamList" resultType="com.examstack.common.domain.exam.Exam">
		select id examId,exam_name examName,exam_subscribe examSubscribe,exam_type examType,start_time effTime,end_time expTime,exam_paper_id examPaperId,creator,creator_id creatorId,approved,(select name from et_exam_paper m where a.exam_paper_id=m.id) examPaperName
		from et_exam a
		<if test="array != null">
			where a.exam_type in		
			<foreach collection="array" item="item" open="(" close=")" separator="," index="index">
				#{item}
			</foreach>
		</if>
		 order by start_time desc
	</select>
	
	<delete id="deleteExamById">
		delete from et_exam where id=#{examId}
	</delete>
</mapper>